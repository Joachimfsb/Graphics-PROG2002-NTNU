#include <string>

const std::string CB_FRAGMENT_SHADER = R"(
    #version 430 core

    flat in vec4 v_Color;
    flat in vec2 v_Position;

    uniform ivec2 u_highlightedSquare;
    uniform ivec2 u_gridLayout;

    out vec4 color;

    void main()
    {
        vec2 gridLayout = vec2(u_gridLayout);
        vec2 currentSquare = ((v_Position + 1) / 2) * gridLayout - 1;

        if (ivec2(currentSquare) == u_highlightedSquare) {
            color = vec4(0.0, 0.0, 1.0, 1.0);
        } else {
            color = v_Color;
        }
    }
    )";



const std::string CB_VERTEX_SHADER = R"(
    #version 430 core

    layout(location = 0) in vec2 a_Position;
    layout(location = 1) in vec4 a_Color;
    
    flat out vec4 v_Color;
    flat out vec2 v_Position;

    uniform mat4 u_Model;
    uniform mat4 u_View;
    uniform mat4 u_Projection;


    void main()
    {
        gl_Position = u_Projection * u_View * u_Model * vec4(a_Position, 0.0f, 1.0f);

        v_Color = a_Color;
        v_Position = a_Position;
    }
    )";
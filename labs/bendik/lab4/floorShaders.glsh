#include <string>

const std::string FLOOR_FRAGMENT_SHADER = R"(
    #version 430 core

    in vec2 v_Position;
    in vec2 v_TextureCoords;
    flat in vec4 v_Color;

    layout(binding=0) uniform sampler2D u_floorTextureSampler;
    uniform ivec2 u_highlightedSquare;
    uniform ivec2 u_gridLayout;



    out vec4 color;

    void main()
    {
        vec2 gridLayout = vec2(u_gridLayout);
        ivec2 currentSquare = ivec2(round(((v_Position + 1) / 2) * gridLayout - 0.5)); // Interpolate position-x/y between 0 and *number of rows/cols*


        if (currentSquare == u_highlightedSquare) {
            color = vec4(0.0, 0.0, 1.0, 1.0);
        } else {
            color = mix(v_Color, texture(u_floorTextureSampler, v_TextureCoords), 0.9);
        }
    }
    )";



const std::string FLOOR_VERTEX_SHADER = R"(
    #version 430 core

    layout(location = 0) in vec2 a_Position;
    layout(location = 1) in vec4 a_Color;
    layout(location = 2) in vec2 a_TextureCoords;
    
    out vec2 v_Position;
    out vec2 v_TextureCoords;
    flat out vec4 v_Color;

    uniform mat4 u_Model;
    uniform mat4 u_View;
    uniform mat4 u_Projection;


    void main()
    {
        gl_Position = u_Projection * u_View * u_Model * vec4(a_Position, 0.0f, 1.0f);

        v_Position = a_Position;
        v_TextureCoords = a_TextureCoords;
        v_Color = a_Color;
    }
    )";